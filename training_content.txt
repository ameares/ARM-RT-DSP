Training Context File

/////////////////////////////////////

I want to work on my Github project today.  This is an 
embedded C project that uses CUnit for unit testing.  The 
project consists of ARM DSP library that I am adding unit
tests to and publishing to GitHub.  I would like to make 
improvements as I go along.  Please pick a task to work on 
today.  Do not complete the task or write any code.

Here are the directories and files in the ARM-DT-DSP repository.
ARM-RT-DSP/
    ./README.md
    ./LICENSE.txt
    ./Makefile
    ./training_content.txt
    ./docs/
        ./usage_guide.md
        ./api_reference.md
    ./tests/
        ./suite1.c
        ./suite2.c
        ./test_main.c
    ./include/
        ./arm_rt_dsp.h
        ./common.h
    ./src/
        ./arm_rt_dsp.c
        ./common.c

Here is my status journal for the project:
5/22 - Added some test cases for a ramp function.
5/21 - Fixed VS Code c_cpp_properties.json file to include the include directory.
5/20 - Added suite2.c with unfinished ramp function tests.
5/20 - Added custom ramp functions to the arm_rt_dsp.h file.
5/20 - Added custom ramp functions to the arm_rt_dsp.c file.
5/20 - Removed unrelevant comments.
5/20 - Investigated automated unit tests on ARM dev boards.
5/19 - Published ARM-RT-DSP to Github private repository and setup VS Code.
5/17 - Added custom DSP types and functions to arm_rt_dsp.h.
5/16 - Added arm_rt_dsp.h and common.h to the project.
5/15 - Created ARM-RT-DSP project in VS Code and added CUnit tests.

Here is a list of tasks that need completing.
1. Add CUnit tests for functions that are not covered.
2. Investigate failed CUnit tests.
3. Investigate running unit tests on ARM dev boards.
4. Refine documentation.
5. Add more custom DSP capabilities.


Here is my Makefile for the project.  Please modify it so that
when I bmake test the files in the SRC_DIR are also compiled.

CC := gcc
CFLAGS := -Wall -Wextra -std=c11 -I./include
LIBS := -lcunit

# Directories
SRC_DIR := src
TEST_DIR := tests
OBJ_DIR := obj

# Source and test files
SOURCES := $(wildcard $(SRC_DIR)/*.c)
TESTS := $(wildcard $(TEST_DIR)/*.c)

# Object files
OBJECTS := $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))
TEST_OBJECTS := $(patsubst $(TEST_DIR)/%.c,$(OBJ_DIR)/%.o,$(TESTS))

# Executables
EXECUTABLE := arm_rt_dsp
TEST_EXECUTABLE := rt_dsp_test_runner

.PHONY: all clean test

all: $(EXECUTABLE)

# Build the main library
$(EXECUTABLE): $(OBJECTS)
	$(CC) $(CFLAGS) $^ -o $@

# Build the test runner
$(TEST_EXECUTABLE): $(TEST_OBJECTS) $(OBJECTS)
	$(CC) $(CFLAGS) $^ -o $@ $(LIBS)

# Rule for building object files
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: $(TEST_DIR)/%.c
	mkdir -p $(@D)
	$(CC) $(CFLAGS) -c $< -o $@

# Run the tests
test: clean $(TEST_EXECUTABLE)
	./$(TEST_EXECUTABLE)

clean:
	rm -f $(OBJECTS) $(TEST_OBJECTS) $(EXECUTABLE) $(TEST_EXECUTABLE)